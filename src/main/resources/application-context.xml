<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <context:annotation-config />

    <context:component-scan base-package="com.pxc.zk.learn.configCenter.*" />

    <!--通过构造函数注入zkServers、sessionTimeout、zkPath从zookeeper动态获取数据库配置  -->
    <bean id="zookeeperConfigCenter" class="com.pxc.zk.learn.configCenter.ZookeeperConfigCenter">
        <constructor-arg name="zkServers" value="192.168.11.117:2181,192.168.11.119:2181,192.168.11.121:2181,192.168.11.122:2181" />
        <constructor-arg name="sessionTimeout" value="1000" />
        <constructor-arg name="zkPath" value="/config/jdbc" />
    </bean>

    <!--这个类等价于以前在xml文件里面的配置：
    <context:property-placeholder location="classpath:config/jdbc_conf.properties"/>  加载props里面的数据库配置-->
    <bean id="zkPlaceholderConfigurer" class="com.pxc.zk.learn.configCenter.ZookeeperPlaceholderConfigurer">
        <property name="zookeeperConfigCenter" ref="zookeeperConfigCenter" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="order" value="1" />
    </bean>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="2000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="600000" />
        <property name="maxEvictableIdleTimeMillis" value="900000" />

        <property name="validationQuery" value="select 1" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis.xml" />
        <property name="mapperLocations"  value="classpath:mappers/*.xml"/>
    </bean>

    <!-- SqlSessionTemplate保证了使用spring的当前的事务 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
        <!-- <constructor-arg index="1" value="BATCH" /> -->
    </bean>

    <!-- 自动扫描 mapper 接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.pxc.zk.learn.configCenter.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 		<property name="sqlSessionTemplate" ref="sqlSession" /> -->
        <property name="sqlSessionTemplateBeanName" value="sqlSession" />
    </bean>



</beans>